#include <iostream>
#include <unordered_map>
#include <queue>
#include <sstream>
#include <string>

using namespace std;

string getNewNumber(int i, string number) {
    std::stringstream ss;
    ss << i << number;
    return ss.str();
}

int main() {
    long count = 0;
    long sum = 0;
    
    // Map from numbers to the sum of their digits, used to find the number of
    // digits without repeating summations.
    unordered_map<string, int> digitsSumMap;
    digitsSumMap["0"] = 0;
    digitsSumMap["1"] = 1;
    digitsSumMap["2"] = 2;
    digitsSumMap["3"] = 3;
    digitsSumMap["4"] = 4;
    digitsSumMap["5"] = 5;
    digitsSumMap["6"] = 6;
    digitsSumMap["7"] = 7;
    digitsSumMap["8"] = 8;
    digitsSumMap["9"] = 9;

    // Queue used to store numbers as strings. When a number is popped from the
    // queue, we add numbers 0..9 to the front of it and check if the sum of 
    // digits.
    std::queue<string> numbersQueue;
    numbersQueue.push("0");
    numbersQueue.push("1");
    numbersQueue.push("2");
    numbersQueue.push("3");
    numbersQueue.push("4");
    numbersQueue.push("5");
    numbersQueue.push("6");
    numbersQueue.push("7");
    numbersQueue.push("8");
    numbersQueue.push("9");

    while (!numbersQueue.empty()) {
        string number = numbersQueue.front();
        numbersQueue.pop();
        int numDigitsSum = digitsSumMap[number]; 

        for (int i = 0; i < 9; i++) {
            // Check if the new number has a sum of digits equal to 69. If so,
            // we add to the count and total sum. If it is lower, we place the
            // new number into the queue and add it to the digitsSumMap. 
            // Otherwise, we ignore since all new numbers generated by this will
            // have a digit sum greater than 69.
            if (i + numDigitsSum == 69) {
                count++;
                string newNumber = getNewNumber(i, number);
                sum += std::stol(newNumber);
            } else if (i + numDigitsSum < 69 && number.length() < 15) {
                string newNumber = getNewNumber(i, number);
                numbersQueue.push(newNumber);
                digitsSumMap[newNumber] = i + numDigitsSum;
            }
        }
    }

    std::cout << "Count: " << count << "\n";
    std::cout << "Sum: " << sum << "\n";
}
